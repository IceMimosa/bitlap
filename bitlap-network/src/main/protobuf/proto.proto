syntax = "proto3";

option java_package = "org.bitlap.network.driver";
option java_multiple_files = true;

message BOpenSession {
  message BOpenSessionReq {
    string username = 1;
    string password = 2;
    map<string, string> configuration = 3;
  }
  message BOpenSessionResp {
    BStatus status = 1;
    map<string, string>  configuration = 2;
    BSessionHandle session_handle = 3;
  }
}

message BCloseSession {
  message BCloseSessionReq {
    BSessionHandle session_handle = 1;
  }
  message BCloseSessionResp {
    BStatus status = 1;
  }
}

message BExecuteStatement {
  message BExecuteStatementReq {
    string statement = 1;
    BSessionHandle session_handle = 2;
    map<string, string> conf_overlay = 3;
    int64 query_timeout = 4;// default 0
  }
  message BExecuteStatementResp {
    BStatus status = 1;
    BOperationHandle operation_handle = 2;
  }
}

message BFetchResults {
  message BFetchResultsReq {
    BOperationHandle operation_handle = 1;
    int64 max_rows = 2;
    int32 fetch_type = 3;
  }
  message BFetchResultsResp {
    BStatus status = 1;
    bool has_more_rows = 2;
    BRowSet results = 3;
  }
}

enum BStatusCode {
  B_STATUS_CODE_SUCCESS_STATUS = 0;
  B_STATUS_CODE_STILL_EXECUTING_STATUS = 1;
  B_STATUS_CODE_ERROR_STATUS = 2;
  B_STATUS_CODE_INVALID_HANDLE_STATUS = 3;
  // TODO others
}

message BStatus {
  BStatusCode status_code = 1;
  string sql_state = 2;
  int32 error_code = 3;
  string error_message = 4;
}

message BHandleIdentifier {
  bytes guid = 1;
  bytes secret = 2;
}

message BSessionHandle {
  BHandleIdentifier session_id = 1;
}

message BOperationHandle {
  BHandleIdentifier operation_id = 1;
  BOperationType operation_type = 2;
  bool has_result_set = 3;
  double modified_row_count = 4;
}

enum BOperationType {
  B_OPERATION_TYPE_UNSPECIFIED = 0;
  B_OPERATION_TYPE_EXECUTE_STATEMENT = 1;
  B_OPERATION_TYPE_GET_SCHEMAS = 2;
  B_OPERATION_TYPE_GET_TABLES = 3;
  B_OPERATION_TYPE_GET_COLUMNS = 4;
}

message BTableSchema {
  repeated BColumnDesc columns = 1;
}

message BColumnDesc {
  string column_name = 1;
  BTypeId type_desc = 2; //TODO
}

message BRow {
  repeated bytes col_vals = 1;
}

message BRowSet {
  int64 start_row_offset = 1;
  repeated BRow rows = 2;
  repeated BColumn columns = 3;
}

message BColumn {
  // TODO pb does not support inheritance?
  repeated string string_column = 1;
}
message BGetTables {
  message BGetTablesReq {
    BSessionHandle session_handle = 1;
    string  database = 2;
    string  pattern = 3;
  }

  message BGetTablesResp {
    BStatus status = 1;
    BOperationHandle operation_handle = 2;
  }
}
message BGetDatabases {
  message BGetDatabasesReq {
    BSessionHandle session_handle = 1;
    string  pattern = 3;
  }

  message BGetDatabasesResp {
    BStatus status = 1;
    BOperationHandle operation_handle = 2;
  }
}

message BGetResultSetMetadata {
  message BGetResultSetMetadataReq {
    BOperationHandle operation_handle = 1;
  }

  message BGetResultSetMetadataResp {
    BStatus status = 1;
    BTableSchema schema = 2;
  }

}

enum BTypeId {
  B_TYPE_ID_UNSPECIFIED = 0;
  B_TYPE_ID_STRING_TYPE = 1;
  B_TYPE_ID_INT_TYPE = 2;
  B_TYPE_ID_DOUBLE_TYPE = 3;
  B_TYPE_ID_LONG_TYPE = 4;
  B_TYPE_ID_BOOLEAN_TYPE = 5;
  B_TYPE_ID_TIMESTAMP_TYPE = 6;
  B_TYPE_ID_SHORT_TYPE = 7;
  B_TYPE_ID_BYTE_TYPE = 8;
  B_TYPE_ID_FLOAT_TYPE = 9;
  B_TYPE_ID_TIME_TYPE = 10;
  B_TYPE_ID_DATE_TYPE = 11;
}


message BGetRaftMetadata {
  message BGetLeaderReq {
    string request_id = 1;
  }
  message BGetLeaderResp {
    optional string ip = 1;
    uint32 port = 2;
  }
}