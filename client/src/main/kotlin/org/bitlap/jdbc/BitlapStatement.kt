package org.bitlap.jdbc

import com.alipay.sofa.jraft.rpc.impl.cli.CliClientServiceImpl
import java.sql.Connection
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.SQLWarning
import java.sql.Statement
import org.bitlap.network.client.BitlapClient.executeStatement
import org.bitlap.network.proto.driver.BOperationHandle
import org.bitlap.network.proto.driver.BSessionHandle

/**
 * Bitlap Statement
 *
 * @author 梦境迷离
 * @since 2021/6/6
 * @version 1.0
 */
open class BitlapStatement(
    private val sessHandle: BSessionHandle,
    private val client: CliClientServiceImpl
) : Statement {

    private var stmtHandle: BOperationHandle? = null
    private val fetchSize = 50

    /**
     * We need to keep a reference to the result set to support the following:
     * `
     * statement.execute(String sql);
     * statement.getResultSet();
     *`
     */
    private var resultSet: ResultSet? = null

    /**
     * The maximum number of rows this statement should return (0 => all rows)
     */
    private var maxRows = 0

    /**
     * Add SQLWarnings to the warningChain if needed
     */
    private var warningChain: SQLWarning? = null

    /**
     * Keep state so we can fail certain calls made after close();
     */
    private var isClosed = false

    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        TODO("Not yet implemented")
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        TODO("Not yet implemented")
    }

    override fun close() {
        // TODO: how to properly shut down the client?
        resultSet = null
        isClosed = true
    }

    override fun executeQuery(sql: String): ResultSet? {
        if (!execute(sql)) {
            throw SQLException("The query did not generate a result set!")
        }
        return resultSet
    }

    override fun executeUpdate(sql: String?): Int {
        TODO("Not yet implemented")
    }

    override fun executeUpdate(sql: String?, autoGeneratedKeys: Int): Int {
        TODO("Not yet implemented")
    }

    override fun executeUpdate(sql: String?, columnIndexes: IntArray?): Int {
        TODO("Not yet implemented")
    }

    override fun executeUpdate(sql: String?, columnNames: Array<out String>?): Int {
        TODO("Not yet implemented")
    }

    override fun getMaxFieldSize(): Int {
        TODO("Not yet implemented")
    }

    override fun setMaxFieldSize(max: Int) {
        TODO("Not yet implemented")
    }

    override fun getMaxRows(): Int {
        TODO("Not yet implemented")
    }

    override fun setMaxRows(max: Int) {
        TODO("Not yet implemented")
    }

    override fun setEscapeProcessing(enable: Boolean) {
        TODO("Not yet implemented")
    }

    override fun getQueryTimeout(): Int {
        TODO("Not yet implemented")
    }

    override fun setQueryTimeout(seconds: Int) {
        TODO("Not yet implemented")
    }

    override fun cancel() {
        TODO("Not yet implemented")
    }

    override fun getWarnings(): SQLWarning {
        TODO("Not yet implemented")
    }

    override fun clearWarnings() {
        warningChain = null
    }

    override fun setCursorName(name: String?) {
        TODO("Not yet implemented")
    }

    override fun execute(sql: String): Boolean {
        if (isClosed) throw SQLException("Can't execute after statement has been closed")
        try {
            resultSet = null
            stmtHandle = client.executeStatement(sessHandle, sql)
            if (stmtHandle == null || !stmtHandle!!.hasResultSet) {
                return false
            }
        } catch (ex: Exception) {
            throw SQLException(ex.toString(), ex)
        }
        resultSet = BitlapQueryResultSet.builder().setClient(client).setSessionHandle(sessHandle)
            .setStmtHandle(stmtHandle!!).setMaxRows(maxRows).setFetchSize(fetchSize)
            .build()
        return true
    }

    override fun execute(sql: String?, autoGeneratedKeys: Int): Boolean {
        TODO("Not yet implemented")
    }

    override fun execute(sql: String?, columnIndexes: IntArray?): Boolean {
        TODO("Not yet implemented")
    }

    override fun execute(sql: String?, columnNames: Array<out String>?): Boolean {
        TODO("Not yet implemented")
    }

    override fun getResultSet(): ResultSet? {
        return resultSet
    }

    override fun getUpdateCount(): Int {
        TODO("Not yet implemented")
    }

    override fun getMoreResults(): Boolean {
        TODO("Not yet implemented")
    }

    override fun getMoreResults(current: Int): Boolean {
        TODO("Not yet implemented")
    }

    override fun setFetchDirection(direction: Int) {
        TODO("Not yet implemented")
    }

    override fun getFetchDirection(): Int {
        TODO("Not yet implemented")
    }

    override fun setFetchSize(rows: Int) {
        TODO("Not yet implemented")
    }

    override fun getFetchSize(): Int {
        return fetchSize
    }

    override fun getResultSetConcurrency(): Int {
        TODO("Not yet implemented")
    }

    override fun getResultSetType(): Int {
        TODO("Not yet implemented")
    }

    override fun addBatch(sql: String?) {
        TODO("Not yet implemented")
    }

    override fun clearBatch() {
        TODO("Not yet implemented")
    }

    override fun executeBatch(): IntArray {
        TODO("Not yet implemented")
    }

    override fun getConnection(): Connection {
        TODO("Not yet implemented")
    }

    override fun getGeneratedKeys(): ResultSet {
        TODO("Not yet implemented")
    }

    override fun getResultSetHoldability(): Int {
        TODO("Not yet implemented")
    }

    override fun isClosed(): Boolean {
        TODO("Not yet implemented")
    }

    override fun setPoolable(poolable: Boolean) {
        TODO("Not yet implemented")
    }

    override fun isPoolable(): Boolean {
        TODO("Not yet implemented")
    }

    override fun closeOnCompletion() {
        TODO("Not yet implemented")
    }

    override fun isCloseOnCompletion(): Boolean {
        TODO("Not yet implemented")
    }
}
