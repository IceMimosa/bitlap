package org.bitlap.jdbc

import java.sql.*
import java.util.Properties
import java.util.concurrent.Executor

/**
 * Bitlap Connection
 *
 * @author 梦境迷离
 * @since 2021/6/6
 * @version 1.0
 */
class BitlapConnection : Connection {
 
    override fun <T : Any?> unwrap(iface: Class<T>?): T {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun isWrapperFor(iface: Class<*>?): Boolean {
        throw SQLFeatureNotSupportedException("Method not supported")
    }
    
    override fun close() {
        TODO("Not yet implemented")
    }

    override fun createStatement(): Statement {
        TODO("Not yet implemented")
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareStatement(sql: String?): PreparedStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareStatement(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): PreparedStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareCall(sql: String?): CallableStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun prepareCall(
        sql: String?,
        resultSetType: Int,
        resultSetConcurrency: Int,
        resultSetHoldability: Int
    ): CallableStatement {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun nativeSQL(sql: String?): String {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setAutoCommit(autoCommit: Boolean) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getAutoCommit(): Boolean {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun commit() {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun rollback() {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun rollback(savepoint: Savepoint?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun isClosed(): Boolean {
        TODO("Not yet implemented")
    }

    override fun getMetaData(): DatabaseMetaData {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setReadOnly(readOnly: Boolean) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun isReadOnly(): Boolean {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setCatalog(catalog: String?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getCatalog(): String {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setTransactionIsolation(level: Int) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getTransactionIsolation(): Int {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getWarnings(): SQLWarning {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun clearWarnings() {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getTypeMap(): MutableMap<String, Class<*>> {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setTypeMap(map: MutableMap<String, Class<*>>?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setHoldability(holdability: Int) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getHoldability(): Int {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setSavepoint(): Savepoint {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setSavepoint(name: String?): Savepoint {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun releaseSavepoint(savepoint: Savepoint?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }
    
    override fun createClob(): Clob {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun createBlob(): Blob {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun createNClob(): NClob {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun createSQLXML(): SQLXML {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun isValid(timeout: Int): Boolean {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setClientInfo(name: String?, value: String?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setClientInfo(properties: Properties?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getClientInfo(name: String?): String {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getClientInfo(): Properties {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun createStruct(typeName: String?, attributes: Array<out Any>?): Struct {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setSchema(schema: String?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getSchema(): String {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun abort(executor: Executor?) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) {
        throw SQLFeatureNotSupportedException("Method not supported")
    }

    override fun getNetworkTimeout(): Int {
        throw SQLFeatureNotSupportedException("Method not supported")
    }
}
